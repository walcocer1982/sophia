import { Logger } from '../utils/Logger';

export class QuestionValidator {
  private logger: Logger;

  constructor() {
    this.logger = new Logger('QuestionValidator');
  }

  /**
   * üö® VALIDACI√ìN INTELIGENTE Y CONTEXTUAL
   */
  validate(response: string, question: string): boolean {
    const cleanResponse = response.toLowerCase().trim();
    
    this.logger.debug(`Validando respuesta: "${cleanResponse}" para pregunta: "${question}"`);
    
    // üö® RECHAZAR respuestas que son claramente emocionales o personales
    const emotionalOnlyResponses = ['mal', 'triste', 'cansado', 'bien', 'regular'];
    if (emotionalOnlyResponses.includes(cleanResponse)) {
      this.logger.debug('Respuesta rechazada: solo emocional, no responde la pregunta');
      return false;
    }
    
    // üö® RECHAZAR respuestas que son claramente personales no relacionadas
    const personalIssues = ['mi mam√° muri√≥', 'mi pap√°', 'mi familia', 'estoy triste', 'tengo problemas'];
    if (personalIssues.some(issue => cleanResponse.includes(issue))) {
      this.logger.debug('Respuesta rechazada: tema personal no relacionado con la pregunta');
      return false;
    }
    
    // üö® RECHAZAR respuestas que son preguntas al docente
    const askingQuestions = ['qu√© me aconsejas', 'qu√© me puedes aconsejar', 'qu√© me recomiendas', 'puedes ayudarme'];
    if (askingQuestions.some(q => cleanResponse.includes(q))) {
      this.logger.debug('Respuesta rechazada: est√° preguntando, no respondiendo');
      return false;
    }
    
    // ‚úÖ ACEPTAR respuestas honestas sobre falta de experiencia
    const honestResponses = [
      'no tengo experiencia', 
      'nunca he trabajado', 
      'no he visto',
      'es nuevo para mi',
      'no conozco',
      'es la primera vez',
      'no tengo idea',
      'no s√©'
    ];
    
    if (honestResponses.some(honest => cleanResponse.includes(honest))) {
      this.logger.debug('Respuesta aceptada: respuesta honesta sobre falta de experiencia');
      return true;
    }
    
    // ‚úÖ Validaci√≥n m√≠nima de longitud
    if (cleanResponse.length < 3) {
      this.logger.debug('Respuesta rechazada: muy corta');
      return false;
    }
    
    // ‚úÖ An√°lisis contextual seg√∫n tipo de pregunta
    return this.analyzeContextualRelevance(cleanResponse, question);
  }

  /**
   * üéØ An√°lisis contextual de relevancia INTELIGENTE
   */
  private analyzeContextualRelevance(response: string, question: string): boolean {
    const questionLower = question.toLowerCase();
    const responseLower = response.toLowerCase();
    
    // üö® Para preguntas sobre conocimientos de incendios
    if (questionLower.includes('sabes') && questionLower.includes('incendios')) {
      const fireRelatedWords = ['fuego', 'incendio', 'quemar', 'llama', 'humo', 'extintor', 'evacuaci√≥n'];
      const hasFireContent = fireRelatedWords.some(word => responseLower.includes(word));
      
      if (!hasFireContent && responseLower.length < 10) {
        this.logger.debug('Respuesta rechazada: no menciona contenido relacionado con incendios');
        return false;
      }
    }
    
    // üö® Para preguntas sobre experiencia con incendios
    if (questionLower.includes('presenciado') && questionLower.includes('incendio')) {
      const experienceWords = ['una vez', 'vi', 'vimos', 'ocurri√≥', 'pas√≥', 'sucedi√≥', 'experiencia'];
      const hasExperienceContent = experienceWords.some(word => responseLower.includes(word));
      
      if (!hasExperienceContent && responseLower.length < 8) {
        this.logger.debug('Respuesta rechazada: no menciona experiencia espec√≠fica');
        return false;
      }
    }
    
    // üö® Para preguntas sobre expectativas de aprendizaje
    if (questionLower.includes('esperas') || questionLower.includes('espera')) {
      const learningWords = ['aprender', 'entender', 'conocer', 'saber', 'prevenir', 'evitar'];
      const hasLearningContent = learningWords.some(word => responseLower.includes(word));
      
      if (!hasLearningContent && responseLower.length < 8) {
        this.logger.debug('Respuesta rechazada: no menciona expectativas de aprendizaje');
        return false;
      }
    }
    
    // üö® Para preguntas sobre causas de incendios
    if (questionLower.includes('causa') || questionLower.includes('puede causar')) {
      const causeWords = ['cortocircuito', 'fuego', 'chispa', 'calor', 'combustible', 'el√©ctrico'];
      const hasCauseContent = causeWords.some(word => responseLower.includes(word));
      
      if (!hasCauseContent && responseLower.length < 6) {
        this.logger.debug('Respuesta rechazada: no menciona causas espec√≠ficas');
        return false;
      }
    }
    
    // ‚úÖ Para cualquier otra pregunta, ser m√°s estricto
    if (responseLower.length < 5) {
      this.logger.debug('Respuesta rechazada: muy corta para criterio general');
      return false;
    }
    
    this.logger.debug('Respuesta aceptada: criterio general');
    return true;
  }

  /**
   * üö® Detecta si la respuesta incluye palabras de futuro o aprendizaje
   */
  private includesFutureOrLearningWords(response: string): boolean {
    const futureWords = [
      'quiero', 'me gustar√≠a', 'espero', 'quisiera', 'deseo',
      'aprender', 'entender', 'conocer', 'saber', 'como', 'c√≥mo'
    ];
    
    return futureWords.some(word => response.includes(word));
  }

  /**
   * üìä Obtener estad√≠sticas de validaci√≥n
   */
  getValidationStats(): {
    totalValidations: number;
    acceptedResponses: number;
    rejectedResponses: number;
  } {
    // Implementar cuando se agregue tracking de estad√≠sticas
    return {
      totalValidations: 0,
      acceptedResponses: 0,
      rejectedResponses: 0
    };
  }
}