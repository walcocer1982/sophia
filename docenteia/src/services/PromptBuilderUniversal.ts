// src/services/PromptBuilderUniversal.ts - Versi√≥n Universal

import { PromptParams } from '../types';

export class PromptBuilderUniversal {
  
  /**
   * Construye el prompt del esp√≠ritu (solo se env√≠a una vez al inicio)
   */
  static buildSpiritPrompt(params: { 
    specialistRole: string; 
    sessionName: string; 
    courseName: string; 
    learningObjective: string 
  }): string {
    return `üéì **ROL DEL DOCENTE IA:**
Eres un ${params.specialistRole} especializado en guiar el aprendizaje de manera inductiva y participativa.

**PROP√ìSITO PEDAG√ìGICO:**
- Guiar al estudiante a trav√©s de momentos estructurados de aprendizaje
- Hacer preguntas espec√≠ficas que lleven al descubrimiento
- Validar cada respuesta antes de avanzar
- Proporcionar pistas cuando el estudiante no sabe o responde parcialmente
- Mantener engagement constante terminando siempre con una pregunta

**OBJETIVO DE LA SESI√ìN:**
${params.learningObjective}

**ESTILO DE COMUNICACI√ìN:**
- Tono cercano pero profesional
- Preguntas claras y espec√≠ficas
- Reconocimiento de avances
- Pistas constructivas cuando sea necesario
- Nunca dar respuestas directas, guiar hacia el descubrimiento

**REGLAS FUNDAMENTALES:**
1. SIEMPRE termina tu respuesta con una pregunta (excepto en el cierre final)
2. NO avances al siguiente momento hasta que todas las preguntas est√©n completamente respondidas
3. Si el estudiante dice "no s√©" o responde parcialmente, da pistas y repregunta
4. Valida cada respuesta antes de considerar que la pregunta est√° respondida
5. Mant√©n el foco en el momento actual, no adelantes informaci√≥n del siguiente`.trim();
  }

  /**
   * Construye el prompt espec√≠fico para un momento - UNIVERSAL
   */
  static buildMomentPrompt(params: PromptParams & { 
    preguntasPendientes: string[];
    preguntasRespondidas: string[];
  }): string {
    const momentoActual = params.momentos[params.currentIndex];
    
    const siguiente = params.currentIndex < params.momentos.length - 1
      ? params.momentos[params.currentIndex + 1].momento
      : 'FIN';

    // Contenido espec√≠fico del momento
    const contenido = this.getMomentoContent(momentoActual);
    
    // Preguntas pendientes del momento
    const preguntasPendientes = params.preguntasPendientes;
    const primeraPregunta = preguntasPendientes[0] || 'N/A';

    // üëà NUEVO: Generar instrucciones din√°micas basadas en el tema
    const instruccionesEspecificas = this.generateDynamicInstructions(momentoActual, params);

    return `**MOMENTO ACTUAL: ${momentoActual?.momento || 'N/A'}**
**SIGUIENTE MOMENTO: ${siguiente}**

**INSTRUCCIONES PEDAG√ìGICAS:**
${instruccionesEspecificas}

**CONTENIDO DEL MOMENTO:**
${contenido}

**PREGUNTAS PENDIENTES:**
${preguntasPendientes.map((p: string, idx: number) => `${idx + 1}. ${p}`).join('\n')}

üìã **INSTRUCCIONES ESTRICTAS:**
1. **SIEMPRE** comienza mostrando el contenido del momento con la frase apropiada:
   - Conexi√≥n: "Te cuento una historia: [historia]"
   - Adquisici√≥n: "Ahora vamos a aprender: [contenido t√©cnico]"
   - Aplicaci√≥n: "Te presento un caso: [caso]"
   - Otros: "[instrucciones]"

2. **DESPU√âS** haz la primera pregunta pendiente: "${primeraPregunta}"

3. **SI** el estudiante dice "no s√©", "no recuerdo", "no tengo idea", etc., usa pistas relacionadas con el tema y repregunta.

4. **NO** avances al siguiente momento hasta que todas las preguntas est√©n completamente respondidas.

5. **SIEMPRE** termina tu respuesta con una pregunta (excepto en el cierre final).

**FORMATO DE RESPUESTA OBLIGATORIO:**
\`\`\`json
{
  "respuesta": "Tu respuesta como docente aqu√≠",
  "momento_actual": "${momentoActual?.momento || 'N/A'}",
  "progreso": ${params.currentIndex + 1},
  "total_momentos": ${params.momentos.length},
  "debe_avanzar": false,
  "razon_avance": "Raz√≥n del avance o por qu√© no avanza",
  "siguiente_momento": "${siguiente}",
  "pregunta_actual": "${primeraPregunta}",
  "preguntas_pendientes": ${preguntasPendientes.length},
  "preguntas_respondidas": ${params.preguntasRespondidas.length}
}
\`\`\`

**REGLAS PARA debe_avanzar:**
- **debe_avanzar: true** ‚Üí SOLO si preguntas_pendientes = 0 (todas respondidas)
- **debe_avanzar: false** ‚Üí Si hay preguntas pendientes o respuestas incompletas

**NO incluyas texto fuera del JSON. NO uses markdown. SOLO el JSON.**`.trim();
  }

  /**
   * üëà NUEVO: Genera instrucciones din√°micas basadas en el momento y tema
   */
  private static generateDynamicInstructions(momento: any, params: PromptParams): string {
    const momentoName = momento?.momento?.toLowerCase() || '';
    const tema = this.extractTemaFromParams(params);
    
    // Instrucciones base por tipo de momento
    let instruccionesBase = '';
    
    if (momentoName.includes('saludo')) {
      instruccionesBase = `Presenta el objetivo de la sesi√≥n sobre ${tema} y establece conexi√≥n con el estudiante`;
    } else if (momentoName.includes('conexi√≥n')) {
      instruccionesBase = `Conecta el tema de ${tema} con experiencias previas del estudiante usando la historia proporcionada`;
    } else if (momentoName.includes('adquisici√≥n')) {
      instruccionesBase = `Ense√±a los conceptos fundamentales de ${tema} de manera inductiva, guiando al descubrimiento`;
    } else if (momentoName.includes('aplicaci√≥n')) {
      instruccionesBase = `Facilita la aplicaci√≥n pr√°ctica de los conceptos de ${tema} usando el caso proporcionado`;
    } else if (momentoName.includes('discusi√≥n')) {
      instruccionesBase = `Facilita la comparaci√≥n y an√°lisis cr√≠tico de diferentes enfoques en ${tema}`;
    } else if (momentoName.includes('reflexi√≥n')) {
      instruccionesBase = `Gu√≠a la reflexi√≥n sobre el aprendizaje de ${tema} y su aplicaci√≥n pr√°ctica`;
    } else {
      instruccionesBase = `Gu√≠a el aprendizaje del estudiante en el tema de ${tema}`;
    }

    // Agregar contexto espec√≠fico del tema
    const contextoTema = this.getContextoTema(tema);
    
    return `${instruccionesBase}\n\n**CONTEXTO DEL TEMA:**\n${contextoTema}`;
  }

  /**
   * üëà NUEVO: Extrae el tema principal de los par√°metros
   */
  private static extractTemaFromParams(params: PromptParams): string {
    const sessionName = params.sessionName.toLowerCase();
    const courseName = params.courseName.toLowerCase();
    
    // Detectar tema basado en nombres
    if (sessionName.includes('incendio') || sessionName.includes('fuego')) {
      return 'prevenci√≥n de incendios';
    } else if (sessionName.includes('iperc')) {
      return 'identificaci√≥n de peligros y evaluaci√≥n de riesgos (IPERC)';
    } else if (courseName.includes('perforaci√≥n') || sessionName.includes('perforaci√≥n')) {
      return 'operaci√≥n de equipos de perforaci√≥n';
    } else if (sessionName.includes('procedimiento') || sessionName.includes('seguridad')) {
      return 'procedimientos de seguridad';
    } else if (courseName.includes('seguridad')) {
      return 'seguridad y salud ocupacional';
    }
    
    // Tema gen√©rico basado en el objetivo
    return params.learningObjective.split(' ').slice(0, 3).join(' ').toLowerCase();
  }

  /**
   * üëà NUEVO: Obtiene contexto espec√≠fico del tema
   */
  private static getContextoTema(tema: string): string {
    const contextualInfo = {
      'prevenci√≥n de incendios': 'Enf√≥cate en el Tri√°ngulo del Fuego, tipos de extintores, causas comunes de incendios laborales, y medidas preventivas.',
      'identificaci√≥n de peligros y evaluaci√≥n de riesgos (iperc)': 'Enf√≥cate en la diferencia entre peligro y riesgo, evaluaci√≥n de probabilidad y severidad, y jerarqu√≠a de controles.',
      'operaci√≥n de equipos de perforaci√≥n': 'Enf√≥cate en componentes de equipos, t√©cnicas de perforaci√≥n, tipos de terreno, y procedimientos operativos.',
      'procedimientos de seguridad': 'Enf√≥cate en equipos de protecci√≥n personal (EPP), se√±alizaci√≥n, protocolos de emergencia, y buenas pr√°cticas.',
      'seguridad y salud ocupacional': 'Enf√≥cate en identificaci√≥n de riesgos, medidas preventivas, normativas de seguridad, y cultura de seguridad.'
    };
    
    // Buscar contexto espec√≠fico o usar gen√©rico
    for (const [key, value] of Object.entries(contextualInfo)) {
      if (tema.includes(key) || key.includes(tema)) {
        return value;
      }
    }
    
    return 'Enf√≥cate en conceptos pr√°cticos, aplicaciones reales, y la conexi√≥n con la experiencia laboral del estudiante.';
  }

  /**
   * Extrae el contenido espec√≠fico del momento
   */
  private static getMomentoContent(momento: any): string {
    if (!momento) return 'N/A';

    const momentoName = momento.momento?.toLowerCase() || '';

    // Para Conexi√≥n, mostrar la historia
    if (momentoName.includes('conexi√≥n') && momento.historia) {
      return `HISTORIA: ${momento.historia}`;
    }

    // Para Adquisici√≥n, mostrar el contenido t√©cnico
    if (momentoName.includes('adquisici√≥n') && momento.contenido_tecnico) {
      const contenido = Array.isArray(momento.contenido_tecnico)
        ? momento.contenido_tecnico.join('\n')
        : momento.contenido_tecnico;
      return `CONTENIDO T√âCNICO:\n${contenido}`;
    }

    // Para Aplicaci√≥n, mostrar el caso
    if (momentoName.includes('aplicaci√≥n') && momento.caso) {
      return `CASO PR√ÅCTICO: ${momento.caso}`;
    }

    // Para otros momentos, mostrar las instrucciones
    const instruccionesDocente = (momento as any)["instrucciones docenteia"] 
      ?? momento.instrucciones_docenteia;
    
    if (typeof instruccionesDocente === 'string' && instruccionesDocente.trim().length > 0) {
      return `INSTRUCCIONES: ${instruccionesDocente}`;
    }

    return 'N/A';
  }

  /**
   * Valida si una respuesta es completa o evasiva - MEJORADO
   */
  static isEvasionResponse(response: string): boolean {
    const evasions = [
      'no s√©', 'no se', 'no recuerdo', 'no tengo idea', 'no estoy seguro',
      'ok', 's√≠', 'si', 'aj√°', 'mmm', 'eh', 'bueno', 'hola', 'hi'
    ];
    
    const cleanResponse = response.toLowerCase().trim();
    
    // Detectar evasiones exactas muy cortas
    const isExactEvasion = evasions.some(evasion => cleanResponse === evasion);
    if (isExactEvasion) return true;
    
    // üëà MEJORADO: Respuestas que indican falta de experiencia pero son honestas
    const honestResponses = [
      'no tengo experiencia', 'es nuevo para mi', 'nunca he trabajado',
      'no he visto', 'no conozco', 'es la primera vez', 'no he estado'
    ];
    
    const isHonestResponse = honestResponses.some(honest => cleanResponse.includes(honest));
    if (isHonestResponse && cleanResponse.length > 15) {
      return false; // üëà Estas son respuestas v√°lidas, no evasivas
    }
    
    // Detectar t√©rminos t√©cnicos que indican conocimiento
    const technicalIndicators = [
      'incendio', 'fuego', 'extintor', 'co2', 'abc', 'agua', 'polvo', 
      'peligro', 'riesgo', 'iperc', 'control', 'prevenci√≥n',
      'perforaci√≥n', 'equipo', 'm√°quina', 'terreno', 'broca',
      'seguridad', 'epp', 'casco', 'guantes', 'procedimiento'
    ];
    
    const hasTechnicalContent = technicalIndicators.some(term => cleanResponse.includes(term));
    
    if (hasTechnicalContent && cleanResponse.length > 10) {
      return false; // No es evasiva si contiene t√©rminos t√©cnicos
    }
    
    // Respuestas muy cortas sin contenido t√©cnico
    const isTooShort = cleanResponse.length < 8;
    
    return isTooShort;
  }

  /**
   * Genera una pista basada en el momento y la pregunta - UNIVERSAL
   */
  static generateHint(momentoName: string, pregunta: string, tema?: string): string {
    const preguntaLower = pregunta.toLowerCase();
    
    // Pistas espec√≠ficas por tipo de pregunta
    if (preguntaLower.includes('elementos') || preguntaLower.includes('identificas')) {
      return "Piensa en los componentes o elementos que observas en la situaci√≥n...";
    }
    if (preguntaLower.includes('experiencia') || preguntaLower.includes('relaciona')) {
      return "Reflexiona sobre tu experiencia personal o situaciones similares que hayas visto...";
    }
    if (preguntaLower.includes('conceptos') || preguntaLower.includes('significa')) {
      return "Piensa en las ideas b√°sicas que podr√≠an estar relacionadas con este tema...";
    }
    if (preguntaLower.includes('prevenido') || preguntaLower.includes('evitar')) {
      return "Considera qu√© medidas o acciones podr√≠an haber cambiado el resultado...";
    }
    if (preguntaLower.includes('aplicar√≠as') || preguntaLower.includes('har√≠as')) {
      return "Piensa en los pasos concretos que seguir√≠as usando lo que hemos aprendido...";
    }
    
    // Pista gen√©rica contextualizada
    const temaContext = tema ? ` sobre ${tema}` : '';
    return `Reflexiona sobre lo que sabes${temaContext} y comp√°rteme tus ideas, aunque sean b√°sicas...`;
  }
} 