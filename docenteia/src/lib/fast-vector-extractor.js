const { OpenAI } = require('openai');
const path = require('path');
require('dotenv').config({ path: path.join(__dirname, '../../.env.local') });

class FastVectorExtractor {
  constructor() {
    this.client = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });
    this.courseData = require('../data/courses-database.json');
    this.cache = new Map();
    // NUEVO: Gesti√≥n de sesiones tipo Redis
    this.sessions = new Map();
  }

  /**
   * Obtiene informaci√≥n del curso y sesi√≥n con validaci√≥n
   * @param {string} courseId - ID del curso
   * @param {string} sessionId - ID de la sesi√≥n
   * @returns {Object} Informaci√≥n validada del curso y sesi√≥n
   */
  getCourseSessionInfo(courseId, sessionId) {
    const course = this.courseData.courses.find(c => c.id === courseId);
    if (!course) {
      throw new Error(`Curso ${courseId} no encontrado`);
    }

    const session = course.sessions.find(s => s.id === sessionId);
    if (!session) {
      throw new Error(`Sesi√≥n ${sessionId} no encontrada en curso ${courseId}`);
    }

    return {
      course,
      session,
      vectorStoreId: course.vector_store_id,
      fileId: session.file_id,
      fileName: session.file_name
    };
  }

  /**
   * NUEVO: Inicia una sesi√≥n con fragmentos pre-calculados para m√°xima velocidad
   * @param {string} courseId - ID del curso
   * @param {string} sessionId - ID de la sesi√≥n
   * @returns {Promise<Object>} Informaci√≥n de la sesi√≥n iniciada
   */
  async startSession(courseId, sessionId) {
    try {
      const { vectorStoreId, fileId, fileName, course, session } = this.getCourseSessionInfo(courseId, sessionId);
      
      console.log(`üöÄ Iniciando sesi√≥n optimizada: ${course.name} - ${session.name}`);
      console.log(`üìÅ Vector Store: ${vectorStoreId}`);
      console.log(`üìÑ Archivo: ${fileName} (${fileId})`);

      // Verificar que el archivo existe
      await this.validateFileExists(vectorStoreId, fileId);

      // Extraer tema esperado
      const expectedTheme = this.extractThemeFromSession(session.name);
      console.log(`üéØ Tema esperado: ${expectedTheme}`);

      // Extraer momentos una sola vez con gpt-4o para m√°xima precisi√≥n
      const momentos = await this.extractMomentosWithPrecision(vectorStoreId, fileId, fileName, course, session, expectedTheme);
      
      // Pre-calcular fragmentos para cada momento (optimizaci√≥n de velocidad)
      const fragmentos = await this.preCalculateFragmentos(vectorStoreId, momentos, expectedTheme);
      
      // Crear ID √∫nico de sesi√≥n
      const sessionKey = `${courseId}-${sessionId}`;
      
      // Almacenar estado de sesi√≥n
      const sessionState = {
        courseId,
        sessionId,
        vectorStoreId,
        fileId,
        fileName,
        course,
        session,
        momentos,
        fragmentos,
        index: 0, // Momento actual
        expectedTheme,
        createdAt: new Date()
      };
      
      this.sessions.set(sessionKey, sessionState);
      
      console.log(`‚úÖ Sesi√≥n iniciada: ${momentos.length} momentos, ${fragmentos.length} fragmentos`);
      console.log(`üíæ Estado guardado con clave: ${sessionKey}`);
      
      return {
        sessionKey,
        momentos: momentos.length,
        fragmentos: fragmentos.length,
        currentMoment: momentos[0]?.momento || 'N/A'
      };

    } catch (error) {
      console.error('Error iniciando sesi√≥n:', error.message);
      throw error;
    }
  }

  /**
   * NUEVO: Extrae momentos con m√°xima precisi√≥n usando gpt-4o
   */
  async extractMomentosWithPrecision(vectorStoreId, fileId, fileName, course, session, expectedTheme) {
    const userPrompt = `
Por favor, revisa el documento espec√≠fico del curso "${course.name}" - sesi√≥n "${session.name}" (file_id: ${fileId}).
Extrae los **momentos clave** seg√∫n los cuales el docente organiza su exposici√≥n.
Devuelve un JSON con el siguiente formato:

[
  { "momento": "INTRODUCCI√ìN", "texto": "‚Ä¶", "file_id": "${fileId}"},
  { "momento": "CONCEPTOS CLAVE", "texto": "‚Ä¶", "file_id": "${fileId}"},
  ...
]

IMPORTANTE: Usa SOLO informaci√≥n del archivo ${fileName}. No incluyas contenido externo.
`;

    const response = await this.client.responses.create({
      model: "gpt-4o",
      instructions: `Eres un sistema que identifica secciones pedag√≥gicas clave en documentos espec√≠ficos. Usa SOLO la informaci√≥n del archivo con file_id="${fileId}".`,
      input: userPrompt,
      tools: [
        {
          type: "file_search",
          vector_store_ids: [vectorStoreId],
          max_num_results: 10
        }
      ],
    });

    const momentos = this.parseJSONResponse(response.output_text);
    this.validateMomentosTheme(momentos, expectedTheme);
    
    return momentos;
  }

  /**
   * NUEVO: Pre-calcula fragmentos para cada momento (optimizaci√≥n de velocidad)
   */
  async preCalculateFragmentos(vectorStoreId, momentos, expectedTheme) {
    console.log(`‚ö° Pre-calculando fragmentos para ${momentos.length} momentos...`);
    
    const fragmentos = await Promise.all(momentos.map(async (momento, index) => {
      try {
        // B√∫squeda sem√°ntica para el momento espec√≠fico
        const searchResults = await this.client.vectorStores.search(vectorStoreId, {
          query: `${momento.momento} ${momento.texto?.substring(0, 100) || ''}`
        });

        // Filtrar por relevancia tem√°tica
        const validResults = searchResults.data.filter(result => {
          const content = result.text || '';
          const themeKeywords = {
            'IPERC': ['peligro', 'riesgo', 'control', 'identificaci√≥n'],
            'Incendios': ['incendio', 'fuego', 'prevenci√≥n', 'extintor'],
            'Perforaci√≥n': ['perforaci√≥n', 'equipo', 'mantenimiento']
          };
          
          const keywords = themeKeywords[expectedTheme] || [];
          const matches = keywords.filter(keyword => 
            content.toLowerCase().includes(keyword.toLowerCase())
          );
          
          return matches.length >= 1;
        });

        const bestResult = validResults[0] || searchResults.data[0];
        
        return {
          momento: momento.momento,
          fragmento: bestResult?.text || momento.texto || '',
          score: bestResult?.score || 0,
          index
        };
      } catch (error) {
        console.warn(`‚ö†Ô∏è Error pre-calculando fragmento para momento ${index}:`, error.message);
        return {
          momento: momento.momento,
          fragmento: momento.texto || '',
          score: 0,
          index
        };
      }
    }));

    console.log(`‚úÖ ${fragmentos.length} fragmentos pre-calculados`);
    return fragmentos;
  }

  /**
   * NUEVO: Maneja la interacci√≥n del estudiante con estado de sesi√≥n
   * @param {string} sessionKey - Clave de la sesi√≥n
   * @param {string} studentMsg - Mensaje del estudiante
   * @returns {Promise<Object>} Respuesta del docente
   */
  async handleStudent(sessionKey, studentMsg) {
    try {
      const session = this.sessions.get(sessionKey);
      if (!session) {
        throw new Error(`Sesi√≥n ${sessionKey} no encontrada`);
      }

      const { course, session: sessionInfo, momentos, fragmentos, index, expectedTheme } = session;
      
      console.log(`üéì ${course.specialist_role} respondiendo en ${sessionInfo.name}`);
      console.log(`üìä Progreso: Momento ${index + 1}/${momentos.length}`);

      // Obtener momento y fragmento actual
      const momentoActual = momentos[index];
      const fragmentoActual = fragmentos[index];
      const siguienteMomento = momentos[index + 1];

      if (!momentoActual) {
        throw new Error('Momento actual no encontrado');
      }

      // Construir contexto de momentos
      const momentosContext = momentos.map((momento, i) => {
        const status = i === index ? 'ACTUAL' : 
                      i < index ? 'COMPLETADO' : 'PENDIENTE';
        return `${i + 1}. ${momento.momento} (${status})`;
      }).join('\n');

      // System prompt optimizado
      const systemPrompt = `Eres un ${course.specialist_role} que est√° ense√±ando la sesi√≥n "${sessionInfo.name}" del curso "${course.name}".

OBJETIVO DE APRENDIZAJE: ${sessionInfo.learning_objective}

PUNTOS CLAVE:
${sessionInfo.key_points.map(point => `- ${point}`).join('\n')}

ESTRUCTURA DE MOMENTOS:
${momentosContext}

MOMENTO ACTUAL: ${momentoActual.momento}
INFORMACI√ìN REAL DEL ARCHIVO: "${fragmentoActual.fragmento}"

PERSONALIDAD PEDAG√ìGICA:
- Usa metodolog√≠a "Teach Like a Champion"
- Construye sobre respuestas parciales del estudiante
- Usa "Right is Right" y "Stretch It"
- NUNCA dar definiciones directas
- Construir conocimiento inductivamente

IMPORTANTE: Usa SOLO la informaci√≥n proporcionada. No agregues teor√≠a externa.`;

      // Respuesta r√°pida con gpt-3.5-turbo
      const completion = await this.client.chat.completions.create({
        model: "gpt-3.5-turbo",
        messages: [
          { role: "system", content: systemPrompt },
          { 
            role: "user", 
            content: `Estudiante dice: "${studentMsg}"

MOMENTO ACTUAL: ${momentoActual.momento}
PROGRESO: ${index + 1}/${momentos.length}

Responde como ${course.specialist_role} siguiendo la metodolog√≠a especificada.
Usa SOLO la informaci√≥n del fragmento proporcionado.

Responde en formato JSON:
{
  "respuesta": "Respuesta del docente",
  "momento_actual": "${momentoActual.momento}",
  "progreso": ${index + 1},
  "total_momentos": ${momentos.length},
  "debe_avanzar": true/false,
  "razon_avance": "Raz√≥n por la que debe o no avanzar",
  "siguiente_momento": "${siguienteMomento ? siguienteMomento.momento : 'FIN'}"
}`
          }
        ],
        max_tokens: 500,
        temperature: 0.7
      });

      // Parsear respuesta
      let parsedResponse;
      try {
        parsedResponse = JSON.parse(completion.choices[0].message.content);
      } catch {
        parsedResponse = {
          respuesta: completion.choices[0].message.content,
          momento_actual: momentoActual.momento,
          progreso: index + 1,
          total_momentos: momentos.length,
          debe_avanzar: false,
          razon_avance: "Respuesta no estructurada",
          siguiente_momento: siguienteMomento ? siguienteMomento.momento : 'FIN'
        };
      }

      // Avanzar autom√°ticamente si debe avanzar
      if (parsedResponse.debe_avanzar && index < momentos.length - 1) {
        session.index = index + 1;
        console.log(`üîÑ Avanzando al momento ${session.index + 1}: ${momentos[session.index]?.momento}`);
      }
      
      return {
        ...parsedResponse,
        sessionKey,
        momentoActual: index,
        momentos: momentos.length,
        fragmentoScore: fragmentoActual.score
      };

    } catch (error) {
      console.error('Error manejando estudiante:', error.message);
      return {
        respuesta: "Lo siento, tuve un problema. ¬øPodr√≠as reformular tu pregunta?",
        momento_actual: 'ERROR',
        progreso: 0,
        total_momentos: 0,
        debe_avanzar: false,
        razon_avance: "Error en el sistema",
        siguiente_momento: 'ERROR',
        sessionKey,
        momentoActual: 0,
        momentos: 0
      };
    }
  }

  /**
   * M√âTODOS LEGACY: Mantener compatibilidad
   */
  async getMomentosDelArchivo(courseId, sessionId) {
    const sessionKey = `${courseId}-${sessionId}`;
    const session = this.sessions.get(sessionKey);
    
    if (session) {
      return session.momentos;
    }
    
    // Si no existe sesi√≥n, iniciar una nueva
    await this.startSession(courseId, sessionId);
    return this.sessions.get(sessionKey).momentos;
  }

  async docenteEspecializadoResponde(courseId, sessionId, userMessage, momentos, momentoActual) {
    const sessionKey = `${courseId}-${sessionId}`;
    const session = this.sessions.get(sessionKey);
    
    if (!session) {
      // Iniciar sesi√≥n si no existe
      await this.startSession(courseId, sessionId);
    }
    
    // Actualizar √≠ndice si es diferente
    if (session && session.index !== momentoActual) {
      session.index = momentoActual;
    }
    
    return this.handleStudent(sessionKey, userMessage);
  }

  /**
   * NUEVO: Obtener informaci√≥n de sesi√≥n
   */
  getSessionInfo(sessionKey) {
    const session = this.sessions.get(sessionKey);
    if (!session) return null;
    
    return {
      courseId: session.courseId,
      sessionId: session.sessionId,
      courseName: session.course.name,
      sessionName: session.session.name,
      currentMoment: session.momentos[session.index]?.momento,
      progress: session.index + 1,
      totalMoments: session.momentos.length,
      createdAt: session.createdAt
    };
  }

  /**
   * NUEVO: Listar todas las sesiones activas
   */
  listActiveSessions() {
    const activeSessions = [];
    for (const [sessionKey, session] of this.sessions) {
      activeSessions.push({
        sessionKey,
        ...this.getSessionInfo(sessionKey)
      });
    }
    return activeSessions;
  }

  /**
   * NUEVO: Limpiar sesi√≥n espec√≠fica
   */
  clearSession(sessionKey) {
    const deleted = this.sessions.delete(sessionKey);
    if (deleted) {
      console.log(`‚úÖ Sesi√≥n ${sessionKey} eliminada`);
    }
    return deleted;
  }

  /**
   * NUEVO: Limpiar todas las sesiones
   */
  clearAllSessions() {
    const count = this.sessions.size;
    this.sessions.clear();
    console.log(`‚úÖ ${count} sesiones eliminadas`);
    return count;
  }

  // M√âTODOS DE VALIDACI√ìN (mantener los existentes)
  validateContentTheme(fileId, expectedTheme, searchResults) {
    if (!searchResults || searchResults.length === 0) {
      console.log(`‚ö†Ô∏è No se encontraron resultados para validar tema`);
      return false;
    }

    const themeKeywords = {
      'IPERC': ['peligro', 'riesgo', 'control', 'identificaci√≥n', 'evaluaci√≥n'],
      'Incendios': ['incendio', 'fuego', 'prevenci√≥n', 'extintor', 'evacuaci√≥n'],
      'Perforaci√≥n': ['perforaci√≥n', 'equipo', 'mantenimiento', 't√©cnica', 'fundamento']
    };

    const keywords = themeKeywords[expectedTheme] || [];
    const content = searchResults.map(r => r.text || '').join(' ').toLowerCase();
    
    const keywordMatches = keywords.filter(keyword => 
      content.includes(keyword.toLowerCase())
    );

    const matchPercentage = (keywordMatches.length / keywords.length) * 100;
    const isValid = matchPercentage >= 60;

    console.log(`üîç Validaci√≥n de tema: ${expectedTheme}`);
    console.log(`üìä Coincidencias: ${keywordMatches.length}/${keywords.length} (${matchPercentage.toFixed(1)}%)`);
    console.log(`‚úÖ Contenido v√°lido: ${isValid}`);

    return isValid;
  }

  async validateFileExists(vectorStoreId, fileId) {
    try {
      const files = await this.client.vectorStores.files.list(vectorStoreId);
      const fileExists = files.data.some(file => file.id === fileId);
      
      if (!fileExists) {
        throw new Error(`Archivo ${fileId} no encontrado en el vector store ${vectorStoreId}`);
      }
      
      console.log(`‚úÖ Archivo ${fileId} validado en vector store`);
    } catch (error) {
      console.error('Error validando archivo:', error.message);
      throw error;
    }
  }

  extractThemeFromSession(sessionName) {
    if (sessionName.includes('IPERC')) return 'IPERC';
    if (sessionName.includes('Incendios')) return 'Incendios';
    if (sessionName.includes('Perforaci√≥n')) return 'Perforaci√≥n';
    return 'General';
  }

  validateMomentosTheme(momentos, expectedTheme) {
    const themeKeywords = {
      'IPERC': ['peligro', 'riesgo', 'control'],
      'Incendios': ['incendio', 'fuego', 'prevenci√≥n'],
      'Perforaci√≥n': ['perforaci√≥n', 'equipo', 'mantenimiento']
    };

    const keywords = themeKeywords[expectedTheme] || [];
    const momentosText = momentos.map(m => m.texto || '').join(' ').toLowerCase();
    
    const keywordMatches = keywords.filter(keyword => 
      momentosText.includes(keyword.toLowerCase())
    );

    if (keywordMatches.length === 0) {
      console.warn(`‚ö†Ô∏è Los momentos extra√≠dos no contienen palabras clave del tema ${expectedTheme}`);
    } else {
      console.log(`‚úÖ Momentos validados para tema ${expectedTheme}`);
    }
  }

  parseJSONResponse(responseText) {
    try {
      const jsonMatch = responseText.match(/```json\s*([\s\S]*?)\s*```/);
      if (jsonMatch) {
        return JSON.parse(jsonMatch[1]);
      }
      return JSON.parse(responseText);
    } catch (error) {
      console.error('Error parseando JSON:', error.message);
      return [];
    }
  }

  getCacheStats() {
    return {
      size: this.cache.size,
      keys: Array.from(this.cache.keys()),
      sessions: this.sessions.size
    };
  }

  clearCache() {
    this.cache.clear();
    console.log('‚úÖ Cache limpiado');
  }
}

module.exports = FastVectorExtractor; 